{
  "version": 3,
  "sources": ["../../react-slugify/src/slugify.ts"],
  "sourcesContent": ["import * as React from \"react\";\n\n/**\n * Remove all accentuated characters from a string\n */\nconst stripAccents = (input: string): string => {\n  const accents =\n    \"ÀÁÂÃÄÅĄàáâãäåąÒÓÔÕÕÖØòóôõöøÈÉÊËĘèéêëðęÇĆçćÐÌÍÎÏìíîïÙÚÛÜùúûüÑñŠŚšśŸÿýŽŹŻžźżŁłŃńàáãảạăằắẳẵặâầấẩẫậèéẻẽẹêềếểễệđùúủũụưừứửữựòóỏõọôồốổỗộơờớởỡợìíỉĩịäëïîüûñçýỳỹỵỷğışĞİŞ\";\n  const fixes =\n    \"AAAAAAAaaaaaaaOOOOOOOooooooEEEEEeeeeeeCCccDIIIIiiiiUUUUuuuuNnSSssYyyZZZzzzLlNnaaaaaaaaaaaaaaaaaeeeeeeeeeeeduuuuuuuuuuuoooooooooooooooooiiiiiaeiiuuncyyyyygisGIS\";\n  const split = accents.split(\"\").join(\"|\");\n  const reg = new RegExp(`(${split})`, \"g\");\n\n  function replacement(a: string) {\n    return fixes[accents.indexOf(a)] || \"\";\n  }\n\n  return input.replace(reg, replacement);\n};\n\nconst getSafeRegexpString = (input: string): string =>\n  input\n    .split(\"\")\n    .map((char) => `\\\\${char}`)\n    .join(\"\");\n\n/**\n * Harmonize a string by removing spaces, non-alphabetical caracters and by\n * adding delimiter\n */\nconst harmonize = (\n  input: string,\n  delimiter: string,\n  ignoreInvalid = false\n): string => {\n  const harmonized = stripAccents(input).trim().toLowerCase();\n  const safeDelimiter = getSafeRegexpString(delimiter);\n\n  if (ignoreInvalid) {\n    return harmonized.replace(/\\s+/g, delimiter);\n  }\n\n  return harmonized\n    .replace(new RegExp(`[^a-z0-9${safeDelimiter}]+`, \"g\"), delimiter) // Replace all non-valid caracters by delimiter\n    .replace(new RegExp(`${safeDelimiter}+`, \"g\"), delimiter) // Remove multiple delimiters repetition\n    .replace(new RegExp(`^${safeDelimiter}`, \"g\"), \"\") // remove delimiter at the beginning\n    .replace(new RegExp(`${safeDelimiter}$`, \"g\"), \"\"); // remove delimiter at the end\n};\n\ninterface SlugifyOptions {\n  delimiter?: string;\n  prefix?: string;\n}\n\n/**\n * Slugify a React node\n */\nconst slugify = (\n  node: React.ReactNode,\n  options: SlugifyOptions = { delimiter: \"-\", prefix: \"\" }\n): string => {\n  if (!options.delimiter) options.delimiter = \"-\";\n  if (!options.prefix) options.prefix = \"\";\n\n  if (!node || typeof node === \"boolean\") {\n    return \"\";\n  }\n\n  const { delimiter, prefix } = options;\n\n  // boolean\n  if (typeof node === \"boolean\") {\n    return \"\"; // not much we can do here\n  }\n\n  // string, number\n  if (typeof node === \"string\" || typeof node === \"number\") {\n    const harmonizedPrefix = harmonize(prefix, delimiter, true);\n    const harmonizedNode = harmonize(String(node), delimiter);\n\n    if (harmonizedPrefix) {\n      return `${harmonizedPrefix}${delimiter}${harmonizedNode}`;\n    }\n\n    return harmonizedNode;\n  }\n\n  // ReactPortal\n  if (\"children\" in node) {\n    return slugify(node.children);\n  }\n\n  // ReactElement\n  if (\"type\" in node) return slugify(node.props.children, options);\n\n  // ReactFragment (including array of nodes)\n  if (Symbol.iterator in node) {\n    return slugify(\n      Array.from(node)\n        .map((subNode) => slugify(subNode, { delimiter }))\n        .join(delimiter),\n      options\n    );\n  }\n\n  // unhandled case\n  return \"\";\n};\n\nexport default slugify;\n"],
  "mappings": ";;;;;;;;AAKA,QAAM,eAAe,CAAC,UAAyB;AAC7C,YAAM,UACJ;AACF,YAAM,QACJ;AACF,YAAM,QAAQ,QAAQ,MAAM,EAAE,EAAE,KAAK,GAAG;AACxC,YAAM,MAAM,IAAI,OAAO,IAAI,UAAU,GAAG;AAExC,eAAS,YAAY,GAAS;AAC5B,eAAO,MAAM,QAAQ,QAAQ,CAAC,CAAC,KAAK;MACtC;AAEA,aAAO,MAAM,QAAQ,KAAK,WAAW;IACvC;AAEA,QAAM,sBAAsB,CAAC,UAC3B,MACG,MAAM,EAAE,EACR,IAAI,CAAC,SAAS,KAAK,MAAM,EACzB,KAAK,EAAE;AAMZ,QAAM,YAAY,CAChB,OACA,WACA,gBAAgB,UACN;AACV,YAAM,aAAa,aAAa,KAAK,EAAE,KAAI,EAAG,YAAW;AACzD,YAAM,gBAAgB,oBAAoB,SAAS;AAEnD,UAAI,eAAe;AACjB,eAAO,WAAW,QAAQ,QAAQ,SAAS;;AAG7C,aAAO,WACJ,QAAQ,IAAI,OAAO,WAAW,mBAAmB,GAAG,GAAG,SAAS,EAChE,QAAQ,IAAI,OAAO,GAAG,kBAAkB,GAAG,GAAG,SAAS,EACvD,QAAQ,IAAI,OAAO,IAAI,iBAAiB,GAAG,GAAG,EAAE,EAChD,QAAQ,IAAI,OAAO,GAAG,kBAAkB,GAAG,GAAG,EAAE;IACrD;AAUA,QAAM,UAAU,CACd,MACA,UAA0B,EAAE,WAAW,KAAK,QAAQ,GAAE,MAC5C;AACV,UAAI,CAAC,QAAQ;AAAW,gBAAQ,YAAY;AAC5C,UAAI,CAAC,QAAQ;AAAQ,gBAAQ,SAAS;AAEtC,UAAI,CAAC,QAAQ,OAAO,SAAS,WAAW;AACtC,eAAO;;AAGT,YAAM,EAAE,WAAW,OAAM,IAAK;AAG9B,UAAI,OAAO,SAAS,WAAW;AAC7B,eAAO;;AAIT,UAAI,OAAO,SAAS,YAAY,OAAO,SAAS,UAAU;AACxD,cAAM,mBAAmB,UAAU,QAAQ,WAAW,IAAI;AAC1D,cAAM,iBAAiB,UAAU,OAAO,IAAI,GAAG,SAAS;AAExD,YAAI,kBAAkB;AACpB,iBAAO,GAAG,mBAAmB,YAAY;;AAG3C,eAAO;;AAIT,UAAI,cAAc,MAAM;AACtB,eAAO,QAAQ,KAAK,QAAQ;;AAI9B,UAAI,UAAU;AAAM,eAAO,QAAQ,KAAK,MAAM,UAAU,OAAO;AAG/D,UAAI,OAAO,YAAY,MAAM;AAC3B,eAAO,QACL,MAAM,KAAK,IAAI,EACZ,IAAI,CAAC,YAAY,QAAQ,SAAS,EAAE,UAAS,CAAE,CAAC,EAChD,KAAK,SAAS,GACjB,OAAO;;AAKX,aAAO;IACT;AAEA,YAAA,UAAe;;;",
  "names": []
}
